<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="de-DE" xml:lang="de-DE">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <meta name="dcterms.date" content="2024-06-20" />
  <title>Kritzelei wird Schrift</title>
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  </style>
  <link rel="stylesheet" href="template/style.css" />
  <meta name="author" content="Christoph Pfeiffer">
  <meta name="description" content="Kritzelei wird Schrift. Kritzeln, Bild machen, Schriftdatei zur Weiterverarbeitung erstellen.">
  <meta name="keywords" content="Kritzelei wird Schrift, Typografie, Fontforge, Schrift">
  <meta property="og:title" content="Kritzelei wird Schrift">
  <meta property="og:site_name" content="Kritzelei wird Schrift">
  <meta property="og:description" content="Kritzelei wird Schrift. Kritzeln, Bild machen, Schriftdatei zur Weiterverarbeitung erstellen.">
  <meta property="og:image" content="https://maybegeek.github.io/Kritzelei-wird-Schrift/template/Kritzelei-wird-Schrift.png">
  <meta property="og:url" content="https://maybegeek.github.io/Kritzelei-wird-Schrift/">
</head>
<body>
<h1 id="kritzelei-wird-schrift"><em>Kritzelei wird Schrift</em></h1>
<p>Weiterentwicklung von <a
href="https://maybegeek.github.io/Hand2Font/">Hand2Font</a>.</p>
<p>Von handgekritzelten Zeichen zum weiterbearbeitbaren Font. Drei Blatt
mit je 49 Kästchen stehen bereit für die jeweiligen Zeichen. Sind die
Kästchen ausgefüllt, können die Bögen per Foto oder Scan umgewandelt
werden.</p>
<ul>
<li>Wichtig hierbei ist, die Kästchen dürfen von den beinhalteten
Zeichen nicht berührt oder durchbrochen werden.</li>
<li>Die vier Randmarken müssen auf dem Bild/Scan ebenfalls vollständig
vorhanden sein.</li>
<li>Bei ungünstiger Belichtung oder ungünstig (kontrastarmer)
Papierfarbe-Schriftkombination kann jederzeit mittels eines
Bildbearbeitungsprogramms – in einem Zwischenschritt – per
<code>threshold</code>/Schwellwert eine Umwandlung in Schwarz-Weiß
manuell durchgeführt werden und die Erkennung in den nächsten Schritten
dadurch verbessert werden.</li>
<li>Als Zielformat benötigen wir Bilddateien im Format
<code>*.jpg</code>.</li>
<li>Das Namensmuster ist <code>A.jpg</code>, <code>B.jpg</code> und
<code>C.jpg</code>.</li>
<li>Falls Sie die Umwandlung von jemand anderem Durchführen lassen
notieren Sie noch in einer Datei <code>Schriftname.txt</code> den
Wunschnamen der Schrift.</li>
</ul>
<p>Für die Weiterverarbeitung gibt es ein Skript zum Entzerren und
Zuschneiden der Glyphen-Vorlage. Hernach werden die Kästchen per
<code>opencv</code> erkannt, der Inhalt der Boxen dann ausgeschnitten
und die vorliegenden Einzelbilder der Kästcheninhalte in
<code>*.ppm</code>-Dateien umgewandelt um diese dann per
<code>potrace</code> zu vektorisieren. Die erstellten
<code>*.svg</code>-Dateien werden im nächsten Schritt an vorgesehenen
Positionen im <code>Font</code> platziert und eine
<code>*.sfd</code>-Datei erstellt.</p>
<p>Die automatische Umwandlung der Zeichen soll einige Schritte bei der
Erstellung einer eigenen Schrift mit <code>Fontforge</code>
beschleunigen. Es wartet auf jeden Interessierten aber noch genügend
(Fein-)Arbeit bei der Verbesserung der automatisch erstellten
<code>*.sfd</code>-Datei.</p>
<h2 id="kritzelei-zeichenvorlage">Kritzelei-Zeichenvorlage</h2>
<div class="glyphenvorlage">
<p><img src="Kritzelei-Zeichenvorlage/Kritzelei-Zeichenvorlage-0.png"
title="Zeichenvorlage-A" alt="Zeichenvorlage-A" /> <img
src="Kritzelei-Zeichenvorlage/Kritzelei-Zeichenvorlage-1.png"
title="Zeichenvorlage-B" alt="Zeichenvorlage-B" /> <img
src="Kritzelei-Zeichenvorlage/Kritzelei-Zeichenvorlage-2.png"
title="Zeichenvorlage-C" alt="Zeichenvorlage-C" /></p>
</div>
<div class="download">
<p><a
href="https://maybegeek.github.io/Kritzelei-wird-Schrift/Kritzelei-Zeichenvorlage/Kritzelei-Zeichenvorlage.pdf"
class="button">Kritzelei-Zeichenvorlage.pdf</a></p>
</div>
<h2 id="magic">magic</h2>
<p>Bei der Erstellung des Fonts werden bzgl. der eigenen Zeichen noch
weitere Einstellungen und Umwandlungen vorgenommen:</p>
<ul>
<li>der Zeichensatz festgelegt: <code>UnicodeFull</code></li>
<li>Versionsnummer für den Font vergeben: <code>1.0</code></li>
<li>font weight: <code>Regular</code></li>
<li><code>fontname</code>, <code>familyname</code> und
<code>fullname</code></li>
<li><code>font.comment = 'FONT_COMMENT'</code></li>
<li><code>font.copyright = 'FONT_LICENSE'</code></li>
<li>em-size: <code>2048</code></li>
<li>Layers: <code>cubic</code></li>
<li><code>stylistic sets</code></li>
<li><code>liga</code>, normale Ligaturen</li>
<li><code>dlig</code>, discretionary ligatures</li>
<li>besondere Leerzeichen</li>
<li>Katzenpfoten!</li>
<li><code>.notdef</code>-Quisquilie</li>
<li>side bearings</li>
<li>Größenanpassung … automagisch</li>
<li>Grundlinien- x-Höhen-Anpassung</li>
</ul>
<h2 id="nutzung">Nutzung</h2>
<p>In den Ordner <code>Kritzelei-Bilder-Original</code> kommen die
Fotos/Scans der ausgefüllten <code>Kritzelei-Zeichenvorlage</code>.</p>
<p>Inhalt dann dort:</p>
<ul>
<li><code>Kritzelei-Bilder-Original/A.jpg</code></li>
<li><code>Kritzelei-Bilder-Original/B.jpg</code></li>
<li><code>Kritzelei-Bilder-Original/C.jpg</code></li>
</ul>
<p>Mittels
<code>python3 Kritzelei-Bilder-Vorbereitung.py -s Kritzelei-Bilder-Original</code>
wird dann der Ordner nach jpg-Dateien inspiziert und die drei Dateien im
Ordner <code>Kritzelei-Bilder-Vorbereitung</code> beschnitten und
entzerrt abgelegt.</p>
<p>Möglicher Inhalt dort:</p>
<ul>
<li><code>Kritzelei-Bilder-Vorbereitung/A.jpg</code></li>
<li><code>Kritzelei-Bilder-Vorbereitung/B.jpg</code></li>
<li><code>Kritzelei-Bilder-Vorbereitung/C.jpg</code></li>
</ul>
<p>Auch die einzelne Umwandlung per
<code>python3 Kritzelei-Bilder-Vorbereitung.py -f A.jpg</code> ist
möglich, der Dateiname ist dann auf den Ordner
<code>Kritzelei-Bilder-Original</code> bezogen.</p>
<p>Wollen wir nachsehen, ob die Glyphen in den jeweiligen Kästen
ordentlich und in ordentlicher Reihenfolge erkannt werden – das ist ja
durchaus sehr wichtig für den nächsten Schritt – so können wir dies mit
<code>python3 Kritzelei-Bilder-Fehlersuche.py -s Kritzelei-Bilder-Vorbereitung</code>
tun.</p>
<p>Hier werden uns dann in einem kleinen Fenster die Originaldatei und
das Erkannte angezeigt. Mit <code>ESC</code> können wir die kleinen
Darstellungen jeweils Bestätigen und so Durchschalten.</p>
<p>Passt dies, geht es weiter. Grundlegend hier zwei Aufrufe, weitere
Einstellmöglichkeiten kann man vorerst der Hilfe innerhalb des Skripts
entnehmen, oder bei Durchsicht des Skripts selbst sehen und ändern:</p>
<p>Hier also die vorbereiteten Bilder aus
<code>Kritzelei-Bilder-Vorbereitung</code> holen (A,B,C) und in den
Ordner <code>Output/Kritzelei-01</code> mit Schriftnamen
<code>Kritzelei-01</code> hinein umwandeln … die Glyphenbilder, deren
Umwandlung und eine weiterverwendbare <code>.sfd</code> erzeugen.
Schwellwerte für Strichdicke, Unreinheiten usw. könnten ebenfalls noch
verwendet werden. <code>--rmppm</code>, <code>--rmsvg</code> oder
<code>--rmjpg</code> entfernt nämliche Zwischenschrittdateien.</p>
<p><code>python3 Kritzelei-wird-Schrift-Scan2SVG.py --scans Kritzelei-Bilder-Vorbereitung/ -o Output/Kritzelei-01 -n Kritzelei-01 --rmppm</code></p>
<p>Ein bisschen mit den Optionen wird man schon spielen müssen, hier
eine Variante, welche gerade bei bestimmten Stiftverwendungen und
Stiftfarbenverwendungen erfolgreich ist. Aber auch hier nochmals der
Hinweis, dass eine vorherige Bearbeitung hin zu kontrastreichem
schwarz/weiß im Bildbearbeitungsprogramm hilfreich ist.</p>
<p><code>python3 Kritzelei-wird-Schrift-Scan2SVG.py --scans Kritzelei-Bilder-Vorbereitung/ -o Output/Kritzelei-02 -n Kritzelei-02 --rmppm --buntstift</code></p>
<p><code>-t 160</code>: Schwellwert hinsichtlich der Umwandlung
(Kastenerkennung). Zwischen 0 und 255, wobei ich für den Standard ca. um
die 160 vorschlagen würde.</p>
<p><code>-o Ordner</code>: Ordnername und Ziel, in welchem die Dateien
abgelegt werden.</p>
<p><code>-n KritzeleiFont</code>: Wie soll der Font später heißen?</p>
<p><code>--rmppm</code>: *.ppm-Dateien im Erstellungsordner
entfernen.</p>
<p><code>--rmjpg</code>: *.jpg-Dateien im Erstellungsordner
entfernen.</p>
<p><code>--rmsvg</code>: *.svg-Dateien im Erstellungsordner
entfernen.</p>
<p><code>--buntstift</code>: bei Buntstift, Farbe, uneinheitlicher
Deckkraft, … (resultiert in Verwendung von
<code>--blacklevel 0.96</code>)</p>
<p><code>--ptdefault</code>: statt <code>--buntstift</code>. Führt zu
genauerer Umsetzung.</p>
<h2 id="ergebnis-in-fontforge">Ergebnis in FontForge</h2>
<figure>
<img src="ff-generated.png"
title="Fontforge-Ansicht der generierten Glyphen"
alt="Fontforge-Ansicht der generierten Glyphen" />
<figcaption aria-hidden="true">Fontforge-Ansicht der generierten
Glyphen</figcaption>
</figure>
<h2 id="download">Download</h2>
<p>Hierzu am besten auf der <a
href="https://github.com/maybegeek/Kritzelei-wird-Schrift">github-Seite
zu Kritzelei wird Schrift</a> die Projektdaten herunterladen:</p>
<div class="download">
<p><a
href="https://github.com/maybegeek/Kritzelei-wird-Schrift/archive/refs/heads/main.zip"
class="button">Projektdateien für <em>Kritzelei wird Schrift</em>
herunterladen</a></p>
</div>
<h2 id="notwendige-pakete">notwendige Pakete</h2>
<h3 id="unter-linux">unter Linux</h3>
<ul>
<li><code>potrace</code></li>
<li><code>libfontforge3</code></li>
<li><code>python3</code></li>
<li><code>python3-skimage</code></li>
<li><code>python3-fontforge</code></li>
<li><code>python3-opencv</code></li>
<li><code>python3-matplotlib</code></li>
</ul>
<p>Viel Vergnügen &amp; happy fonting,<br />
Christoph Pfeiffer</p>
</body>
</html>
